name: "Terraform Workflow"

on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
      aws-assume-role-arn:
        required: true
        type: string

permissions:
  id-token: write
  contents: read
  issues: write

jobs:
  terraform:
    runs-on: ubuntu-latest

    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.9.8

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ inputs.aws-assume-role-arn }}
          role-session-name: GitHubActions-to-AWS-FederatedOIDC
          aws-region: "us-east-1"

      - name: Debug inputs
        run: |
          echo "Environment: ${{ inputs.environment }}"
          echo "AWS Assume Role ARN: ${{ inputs.aws-assume-role-arn }}"

      - name: Read destroy configuration
        id: read-destroy-config
        run: |
          DESTROY=$(jq -r '.${{ inputs.environment }}' ./destroy_config.json)
          echo "destroy=$DESTROY" >> $GITHUB_ENV

      # Step para o destroy de 07 a 01
      - name: Run Terraform destroy in modules 07-01
        id: terraform-destroy
        run: |
          set -e  # Se qualquer comando falhar, o script para

          if [[ "$destroy" == "true" ]]; then
            # Ordem dos módulos para destroy (do 07 ao 01)
            modules=("07-storage" "06-eip" "05-back-end" "04-front-end" "03-security-groups" "02-utils" "01-network")
            
            for dir in "${modules[@]}"; do
              echo "🚀 Executando Terraform Destroy no diretório: $dir"
              cd $dir

              echo "🔹 Terraform Init"
              terraform init

              echo "⚠️ Executando Terraform Destroy em $dir"
              terraform destroy -var-file=../inventories/${{ inputs.environment }}/terraform.tfvars -auto-approve

              cd ..
              echo "✅ Concluído: $dir"
            done

            # Define a variável para interromper o fluxo
            echo "Terraform Destroy foi concluído. Workflow será interrompido."
            echo "skip_remaining_steps=true" >> $GITHUB_ENV
          fi

      # Executa os módulos 01 a 03, se o Terraform Destroy não for executado
      - name: Run Terraform in modules 01-03
        if: ${{ env.skip_remaining_steps != 'true' }}
        run: |
          set -e  # Se qualquer comando falhar, o script para

          for dir in 01-network 02-utils 03-security-groups; do
            echo "🚀 Executando Terraform no diretório: $dir"
            cd $dir

            echo "🔹 Terraform Init"
            terraform init

            # Sempre executa Terraform Plan e Apply
            echo "📝 Executando Terraform Plan em $dir"
            terraform plan -var-file=../inventories/${{ inputs.environment }}/terraform.tfvars -out="${{ inputs.environment }}.plan"

            echo "🚀 Executando Terraform Apply em $dir"
            terraform apply "${{ inputs.environment }}.plan"

            cd ..
            echo "✅ Concluído: $dir"
          done

      - name: Await Manual Approval
        if: ${{ env.skip_remaining_steps != 'true' }}     
        uses: trstringer/manual-approval@v1
        with:
          secret: ${{ secrets.GITHUB_TOKEN }}
          approvers: TomasAlric
          minimum-approvals: 1
          issue-title: "Manual Approval Required for Terraform Apply"
          issue-body: "Please approve or deny the deployment."

      # Executa os módulos 04 a 07 após aprovação, se necessário
      - name: Run Terraform in modules 04-07
        if: ${{ env.skip_remaining_steps != 'true' }}
        run: |
          set -e  # Se qualquer comando falhar, o script para

          for dir in 04-front-end 05-back-end 06-eip 07-storage; do
            echo "🚀 Executando Terraform no diretório: $dir"
            cd $dir

            echo "🔹 Terraform Init"
            terraform init

            # Sempre executa Terraform Plan e Apply
            echo "📝 Executando Terraform Plan em $dir"
            terraform plan -var-file=../inventories/${{ inputs.environment }}/terraform.tfvars -out="${{ inputs.environment }}.plan"

            echo "🚀 Executando Terraform Apply em $dir"
            terraform apply "${{ inputs.environment }}.plan"

            cd ..
            echo "✅ Concluído: $dir"
          done
